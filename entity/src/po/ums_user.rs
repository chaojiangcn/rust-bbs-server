//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "ums_user")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(unique)]
    pub username: Option<String>,
    #[sea_orm(unique)]
    pub email: Option<String>,
    pub email_verified: i8,
    pub nickname: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub avatar: Option<String>,
    pub gender: Option<String>,
    pub birthday: Option<DateTime>,
    #[sea_orm(column_type = "Text", nullable)]
    pub background_image: Option<String>,
    pub password: Option<String>,
    pub home_page: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,
    pub score: i32,
    pub status: i32,
    pub topic_count: i32,
    pub comment_count: i32,
    pub follow_count: i32,
    pub fans_count: i32,
    #[sea_orm(column_type = "Text", nullable)]
    pub roles: Option<String>,
    pub create_time: Option<DateTime>,
    pub update_time: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::comment::Entity")]
    Comment,
    #[sea_orm(has_many = "super::favorite::Entity")]
    Favorite,
    #[sea_orm(has_many = "super::like::Entity")]
    Like,
}

impl Related<super::comment::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Comment.def()
    }
}

impl Related<super::favorite::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Favorite.def()
    }
}

impl Related<super::like::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Like.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
